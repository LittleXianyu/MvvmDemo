def testTaskName = "testDebugUnitTest"
task testCoverage(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the  build."
    def fileFilter = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]
    /**
     * // 字节码路径
     classDirectories.from = fileTree(
     dir: './build/intermediates/javac/debug',
     excludes: []
     */
    System.out.println("javaTree =====> "+"${project.buildDir}/intermediates/javac/debug/classes")
    def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    classDirectories.from = files([javaTree], [kotlinTree])
    executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
    def coverageSourceDirs = ["../app/src/main/java"]

    sourceDirectories.setFrom(files(coverageSourceDirs))
    additionalSourceDirs.setFrom(files(coverageSourceDirs))
    System.out.println("executionData ===> : "+"${project.buildDir}/jacoco/${testTaskName}.exec")
    System.out.println("report ===> : "+ "${buildDir}/coverage-report")
    reports {
        csv.enabled false // change if needed
        xml.enabled true // change if needed
        html {
            enabled true
            destination file("${buildDir}/coverage-report")
        }
    }
    doFirst {
        new File("$project.buildDir/intermediates/javac/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}